#!/bin/bash

set -euo pipefail

# -------- colors & misc --------
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; NC='\033[0m'
info(){ echo -e "${GREEN}[INFO]${NC} $*"; }
warn(){ echo -e "${YELLOW}[WARN]${NC} $*"; }
err(){ echo -e "${RED}[ERROR]${NC} $*" >&2; }
trap 'err "Build failed at line $LINENO"' ERR

# -------- config --------
BUILD_TYPE="${BUILD_TYPE:-Release}"     # override: BUILD_TYPE=Debug ./build.sh
PRESET="conan-$(echo "$BUILD_TYPE" | tr '[:upper:]' '[:lower:]')"   # conan-release / conan-debug
BUILD_DIR="build/${BUILD_TYPE}"
VENV_DIR=".venv"
NON_INTERACTIVE="${NON_INTERACTIVE:-0}" # set to 1 to skip "Launch?" prompt
EXECUTABLE="${EXECUTABLE:-./build/Release/3DShader}"

# CPU count (Linux/macOS)
if command -v nproc >/dev/null 2>&1; then
  CPUS="$(nproc)"
elif [[ "$(uname -s)" == "Darwin" ]]; then
  CPUS="$(sysctl -n hw.ncpu)"
else
  CPUS=4
fi

# -------- prereqs: Python, pip --------
if ! command -v python3 >/dev/null 2>&1; then
  err "python3 is required. Install it (apt/brew) and retry."
  exit 1
fi

# -------- local Conan install (venv) --------
activate_venv() {
  # shellcheck source=/dev/null
  source "${VENV_DIR}/bin/activate"
}

if [[ ! -d "${VENV_DIR}" ]]; then
  info "Creating virtualenv: ${VENV_DIR}..."
  python3 -m venv "${VENV_DIR}"
  activate_venv
  python -m pip install --upgrade pip
  info "Installing Conan 2 in virtualenv..."
  python -m pip install "conan>=2.0,<3.0"
else
  activate_venv
fi

# verify conan
if ! command -v conan >/dev/null 2>&1; then
  err "Conan not available even after venv setup."
  exit 1
fi
info "Using $(conan --version)"

# -------- CMake check --------
if ! command -v cmake >/dev/null 2>&1; then
  case "$(uname -s)" in
    Linux)  err "CMake not found. Try: sudo apt install cmake (Debian/Ubuntu) or your distro's package manager." ;;
    Darwin) err "CMake not found. Try: brew install cmake" ;;
    *)      err "CMake not found. Please install it." ;;
  esac
  exit 1
fi
info "Using $(cmake --version | head -n1)"

# -------- Conan profile & dependencies --------
info "Detecting Conan profile..."
conan profile detect --force >/dev/null

# Ensure build dir exists (Conan can also create it via -of)
mkdir -p "${BUILD_DIR}"

info "Installing Conan dependencies..."
info "(build_type=${BUILD_TYPE})"
conan install . \
  -s build_type="${BUILD_TYPE}" \
  --build=missing

info "Conan dependencies installed."

# -------- Configure with CMake preset generated by Conan --------
info "Configuring CMake..."
info "(preset=${PRESET})"
cmake --preset "${PRESET}"

# -------- Build --------
info "Building target(s) with ${CPUS} parallel jobs..."
cmake --build --preset "${PRESET}" --parallel "${CPUS}"
info "Build completed successfully."

# -------- Run (optional) --------
if [[ "${NON_INTERACTIVE}" -eq 0 ]]; then
  echo -e "${GREEN}[INFO]${NC} Executable file: ${EXECUTABLE}"
  read -r -n1 -p "Launch? [y/N] " REPLY || true
  echo
  if [[ "${REPLY:-N}" =~ ^[Yy]$ ]]; then
    cd build/Release
    exec ./3DShader
  fi
fi